#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
console.log('🚀 Starting server on port:', port);
console.log('📊 Environment:', process.env.NODE_ENV || 'development');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 * Wait for database connection before starting server.
 */

// Start server immediately - don't wait for database
let serverStarted = false;

console.log('🚀 Starting HTTP server immediately...');
console.log('📊 Mongoose connection state:', mongoose.connection.readyState);
// 0 = disconnected, 1 = connected, 2 = connecting, 3 = disconnecting

// Start server immediately for Render compatibility
startServer();

// Also set up event listeners for future connections
mongoose.connection.once('open', () => {
  console.log('🔗 Database connection confirmed after server start');
});

mongoose.connection.on('error', (err) => {
  console.error('❌ Database connection error:', err.message);
});

function startServer() {
  if (serverStarted) {
    console.log('⚠️ Server already started, skipping...');
    return;
  }
  serverStarted = true;

  console.log('🎯 Attempting to bind server to port:', port, 'on host: 0.0.0.0');
  console.log('🔧 Server object created:', !!server);

  try {
    server.listen(port, '0.0.0.0', () => {
      console.log('✅ Server.listen() callback executed successfully');
    });

    server.on('error', onError);
    server.on('listening', onListening);

    console.log('📡 Event listeners attached to server');
  } catch (error) {
    console.error('❌ Error in startServer():', error);
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  console.error('🚨 Server error occurred:', error);
  console.error('🔍 Error details:', {
    code: error.code,
    syscall: error.syscall,
    port: port,
    message: error.message
  });

  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('❌ ' + bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('❌ ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      console.error('❌ Unexpected server error:', error);
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('✅ Server successfully listening on ' + bind);
  console.log('🌐 Server address:', addr);
  debug('Listening on ' + bind);
}
