#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
console.log('üöÄ Starting server on port:', port);
console.log('üìä Environment:', process.env.NODE_ENV || 'development');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 * Wait for database connection before starting server.
 */

// Wait for database connection before starting server
let serverStarted = false;

mongoose.connection.once('open', () => {
  if (!serverStarted) {
    console.log('üîó Database connected, starting HTTP server...');
    startServer();
  }
});

// Fallback: Start server after timeout even if DB isn't ready (for Render compatibility)
setTimeout(() => {
  if (!serverStarted) {
    console.log('‚è∞ Starting server without waiting for database (timeout fallback)...');
    startServer();
  }
}, 10000); // 10 second timeout

// Handle database connection errors
mongoose.connection.on('error', (err) => {
  console.error('‚ùå Database connection error:', err.message);
  // Don't exit - let server start anyway for Render compatibility
});

function startServer() {
  if (serverStarted) return;
  serverStarted = true;

  server.listen(port, '0.0.0.0');
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('‚úÖ Server successfully listening on ' + bind);
  console.log('üåê Server address:', addr);
  debug('Listening on ' + bind);
}
