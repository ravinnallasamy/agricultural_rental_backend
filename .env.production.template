# Production Environment Variables Template
# Copy this file to .env and update with your actual production values

# MongoDB Configuration
MONGODB_URI=mongodb+srv://uzhavanrentals:uzhavanrentals123@uzhavanrentals.w6cobkl.mongodb.net/rental_db?retryWrites=true&w=majority&appName=Uzhavanrentals

# Server Configuration
# PORT is automatically provided by hosting services (Render, Railway, Heroku)
PORT=
NODE_ENV=production

# JWT Configuration - GENERATE SECURE SECRETS FOR PRODUCTION!
# Use: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=REPLACE_WITH_SECURE_64_CHAR_SECRET
JWT_ACTIVATION_SECRET=REPLACE_WITH_SECURE_64_CHAR_SECRET
JWT_EXPIRE=1d

# Email Configuration (Gmail App Password)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=uzhavanrentals@gmail.com
EMAIL_PASS=dnrx fcto hlss gerw

# Frontend URLs - UPDATE WITH YOUR NETLIFY DEPLOYMENT URL
FRONTEND_URL=https://your-app-name.netlify.app
FRONTEND_URLS=https://your-app-name.netlify.app
FRONTEND_PORTS=

# Backend URL - UPDATE WITH YOUR BACKEND DEPLOYMENT URL
# Examples:
# Render: https://your-backend-app.onrender.com
# Railway: https://your-backend-app.up.railway.app
# Heroku: https://your-backend-app.herokuapp.com
BACKEND_URL=https://your-backend-app.onrender.com

# API Configuration
API_VERSION=v1

# Security Notes:
# 1. Never commit this file with real secrets to version control
# 2. Use your hosting service's environment variable management
# 3. Generate strong JWT secrets using crypto.randomBytes()
# 4. Consider using a password manager for the email app password
